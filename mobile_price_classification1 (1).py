# -*- coding: utf-8 -*-
"""mobile price classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aM7mlN7Bay5QAjwl7GHvgxupVfvKY_sW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv("train.csv")

df.head()

df.columns.tolist()

df.shape

for i in df.columns:
    print(df[i].value_counts())
    print('.....................')

df.isnull().sum()

df.duplicated()

df.hist(figsize=(20,20),color="red")

corr = df.corr()

plt.figure(figsize=(15,15))
sns.heatmap(corr, annot=True, vmin=0, vmax=1, cmap='Greens', fmt='.2f')
plt.show()

sorted_counts = df["wifi"].value_counts()
print(sorted_counts)
plt.pie(sorted_counts, labels=sorted_counts.index, autopct="%0.2f")
plt.title("Wifi")
plt.show()

sorted_counts = df["three_g"].value_counts().sort_index()
plt.pie(sorted_counts, labels=sorted_counts.index, autopct="%0.2f")
plt.title("3g?")
plt.show()

sorted_counts = df["four_g"].value_counts().sort_index()
plt.pie(sorted_counts, labels=sorted_counts.index, autopct="%0.2f")
plt.title("4g?")
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='four_g',hue="price_range", data=df)
plt.title("4G in each price range",fontweight="bold", size=10)
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='wifi',hue="price_range", data=df)
plt.title("4G in each price range",fontweight="bold", size=10)
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='three_g',hue="price_range", data=df)
plt.title("4G in each price range",fontweight="bold", size=10)
plt.show()

index_to_exclude = df.columns.get_loc('price_range')
X = df.iloc[:, [i for i in range(df.shape[1]) if i != index_to_exclude]].values
y = df.iloc[:,index_to_exclude].values
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

X_train

y_train

from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report , accuracy_score

RanF_model = RandomForestClassifier(n_estimators= 150)
RanF_model.fit(X_train , y_train)

RanF_model.score(X_train , y_train)

RanF_pred = RanF_model.predict(X_test)
accuracy_score(y_test , RanF_pred)

print(classification_report(y_test , RanF_pred))

cm1 = confusion_matrix(y_test,RF_pred)
plt.figure(figsize=(10,7))
sns.heatmap(cm1,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truh')

from sklearn import svm
svc = svm.SVC(kernel='linear')
svc.fit(X_train, y_train)

svc.score(X_train , y_train)

svc_pred = svc.predict(X_test)
accuracy_score(y_test , svc_pred)

print(classification_report(y_test , svc_pred))

cm1 = confusion_matrix(y_test,svc_pred)
plt.figure(figsize=(10,7))
sns.heatmap(cm1,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truh')